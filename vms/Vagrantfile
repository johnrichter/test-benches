# -*- mode: ruby -*-
# vi: set ft=ruby :

# You can pass env variables when calling Vagrant. Current options from the Ansible playbook
# * ANSIBLIFY_PASSWORD_SALT
# * ANSIBLIFY_USER_PASSWORD
# * ANSIBLIFY_USER_SSH_KEY_PASSPHRASE
# * DD_SITE: "datadoghq.com"
# * DD_ENV: "test"
# * DD_TAGS: "[datacenter:local]" - Must be a valid yaml list [a:b, c:d]. Used in the official role
# * DD_HOST_TAGS: "env:test,datacenter:local" - Comma separated. Used in the script installer

# Supports x86_64 and ARM64 (including Apple Silicon)
HOST_ARCH = "arm64" # Values: amd64, arm64
BASE_IP = "172.17.1"

DEFAULT_VM_CONFIG = {
    cpu: {
        count: 2,
        execution_cap: 75,
    },
    memory: "1024",
    hostname: "set-this-on-each-box"

}
BOXES = [
    {
        name: "ubuntu2204",
        box: "jrichter-io/jammy-#{HOST_ARCH}",
        vm: DEFAULT_VM_CONFIG.merge({
            hostname: "ubuntu2204.local",
        }),
    },
    {
        name: "ubuntu2004",
        box: "jrichter-io/focal-#{HOST_ARCH}",
        vm: DEFAULT_VM_CONFIG.merge({
            hostname: "ubuntu2004.local",
        }),
    },
    # Currently the vector install fails on centos8, centos/stream8, centos7, and fedora37 due to
    # a CA certifcate issue. Pretty sure Centos8 ships old CAs
]

Vagrant.configure("2") do |vagrant|
    BOXES.each_index do |box_index|
        config = BOXES[box_index]
        vagrant.vm.define config[:name] do |machine|
            machine.vm.box = config[:box]
            machine.vm.hostname = config[:vm][:hostname]
            machine.vm.network "private_network", ip: "#{BASE_IP}.#{box_index+100}"
            config.vm.provider "vmware_desktop" do |vmw|
                vmw.vmx["displayname"] = config[:name]
                vmw.vmx["numvcpus"] = "#{config[:vm][:cpu][:count]}"
                vmw.vmx["memsize"] = "#{config[:vm][:memory]}"
            end
            machine.vm.provider "virtualbox" do |vb|
                vb.name = config[:name]
                vb.cpus = config[:vm][:cpu][:count]
                vb.memory = config[:vm][:memory]
                vb.customize ["modifyvm", :id, "--cpuexecutioncap", "#{config[:vm][:cpu][:execution_cap]}"]
            end

            # Only provision the machines after the last VM is up and ready. This
            # let's us take advantage of Ansible's parallelism
            if box_index == BOXES.length - 1
                machine.vm.provision :ansible do |ansible|
                    ansible.playbook = "provisioning/ansible/playbook.yaml"
                    ansible.config_file = "provisioning/ansible/ansible.cfg"
                    ansible.limit = "all"
                    ansible.verbose = "v"
                    ansible.extra_vars = {
                        vagrant: {
                            datadog: {
                                install_agent: true,
                                install_agent_via_role: true,
                                install_agent_via_script: false,
                            },
                            vector: {
                                install_agent: true,
                            },
                        },
                    }
                end
            end
        end
    end
end
